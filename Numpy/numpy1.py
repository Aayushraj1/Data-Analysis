# -*- coding: utf-8 -*-
"""numpy1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jPZNmU-29fAqQdVqUtW29l0TpEe_h6Iv
"""

import numpy as np

"""#BASICS"""

a = np.array([1,2,3,4])
print(a)

b = np.array([[1,2,3],[4,6,8]])
print(b)

#get dimension
b.ndim

#get shape
print(a.shape)
print(b.shape)

#get types
print(b.dtype)

c = np.array([1,2], dtype = "int8")
print(c)
c.dtype

d = np.array([[1,2],[2,3,4]], dtype = "object")
print(d)
print(d.ndim)

#get size (in bytes) of one element
print(a.itemsize)
print(c.itemsize)

# get full size
print(c.nbytes)

"""#Accessing/Changing specific elements,rows,columns,etc.

"""

ar = np.array([[1,2,3,4,5],[0,6,7,8,9]])
print(ar)

#get specific element
print(ar[0])
print(ar[1,2])
print(ar[:,2])
print(ar[1,2:4])

# from start index end index and step size
print(ar[0, 1:5:2])

# change something
ar[0,1] = 20
print(ar)

ar[:,2] = [77,66]
print(ar)

"""#INITIALIZE DIFFERENT TYPES OF ARRAYS"""

#  All 0s matrix
np.zeros(5)

np.zeros((2,3))

# All 1s matrix
np.ones((4,3))

np.ones((2,3),dtype="int8")

# Any other number
np.full((3,3),5)

np.full(ar.shape,4)

# random decimal numbers
np.random.rand(4,2)

# random integer values
np.random.randint(5,size=(2,3))

# the identity matrix
np.identity(3,dtype="int8")

# repeatation of array in 1d and 2d
arr = np.array([1,2,3])
r1 = np.repeat(arr,3)
print(r1)

arr2 = np.array([[1,2,3]])
r2 = np.repeat(arr2,2,axis=0)
print(r2)

# example to practice
out = np.ones((5,5))
print(out,end='\n\n')

z = np.zeros((3,3))
z[1,1] = 9
print(z,end="\n\n")

out[1:4,1:4] = z
print(out)

# be
# carefull
# copying arrays

arr1 = np.array([1,2,3])
b = a.copy()
# b = a don't work ,it only create the refrence variable for a
print(b)
a[0] = 44
print(b)

"""#MATHEMATICS"""

math1 = np.array([1,2,3])

print(math1-3)
print(math1/2)
print(math1*3)
print(math1**3)

math2 = np.array([4,5,6,])
print(math1+math2)

# take sign of all value
print(np.sin(math1))
print(np.cos(0))

"""#LINEAR ALGEBRA"""

la1 = np.ones((2,3))
print(la1)

la2 = np.full((3,2),2)
print(la2)

print(np.matmul(la1,la2))

la3 = np.identity(3)
np.linalg.det(la3)

# we can use matrix functions like
# normalisation
# equivvalence
# inverse
# trace
# etc

"""#STATISTICS"""

stats = np.array([[1,2,3],[4,5,6],[0,9,8]])
print(stats)

print(np.min(stats))
# for minimum in every row
print(np.min(stats,axis=1))
# for minimum in every col
print(np.min(stats,axis=0))

# max function also
np.max(stats)

"""#REORGANIZING ARRAYS"""

ra1 = np.array([[1,2,3,4],[5,6,7,8]])
print(ra1)
#  reshape(no.of list,row,col)
ra2 = ra1.reshape((2,4,1)) 
print(ra2)

# verticle stacking
v1 = np.array([1,2,3,4])
v2 = np.array([9,8,7,6])

np.vstack([v1,v2])

# horizontal stack
h1 = np.array([[1,2],[4,5]])
h2 = np.array([[7,6],[5,3]])

np.hstack((h1,h2))

"""#Miscellaneos"""

# load data from file
filedata = np.genfromtxt('/data.txt',delimiter=',')

# changing type of data
filedata.astype("int16")

# ADVANCE INDEXING AND BOOLEAN MASKING

filedata>50

filedata[filedata>50]

# index with a list in numpy
m = np.array([1,2,3,4,5,6,7,8,9,])         
m[[4,0,5]]

np.any(filedata>50,axis=0)